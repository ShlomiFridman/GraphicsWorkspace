!SESSION 2024-12-05 21:46:38.028 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.8.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file D:\My_Documents\OneDrive - ORT Braude College of Engineering\DOK\Graphics\workspace\.metadata\.bak_0.log
Created Time: 2024-12-06 15:11:44.401

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:44.402
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:44.403
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:44.403
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:46.420
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:46.421
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:46.421
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:46.925
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:46.926
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:46.927
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:49.273
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:49.273
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:49.274
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:50.883
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:50.884
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:50.884
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:52.356
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:52.356
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:52.357
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:56.728
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expectedBaryCoords = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:56.728
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:56.729
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:57.611
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:11:57.611
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:11:57.612
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:57.725
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:57.726
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:57.726
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:11:58.849
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:11:58.850
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:11:58.850
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:00.984
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:00.985
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:00.985
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:17.555
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(barycentricCoordinates.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:17.556
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:17.556
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:18.929
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(re.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:18.930
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:18.931
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:18.992
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(re.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:18.993
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:18.994
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:20.384
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:20.385
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:20.385
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:20.403
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:20.404
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:20.404
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:21.289
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:21.290
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:21.290
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:22.523
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:22.524
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:22.524
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:23.155
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + barycentricCoordinates.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:23.156
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:23.156
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:26.019
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + .y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:26.019
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:26.020
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:26.168
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:26.169
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:26.169
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:26.179
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:26.180
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:26.181
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:27.512
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:27.513
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:27.513
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:28.026
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y  - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:28.027
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:28.027
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:28.194
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y  - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:28.194
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:28.195
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:29.122
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y +  - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:29.122
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:29.123
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:29.285
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y +  - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:29.286
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:29.287
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:30.083
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:30.085
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:30.085
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:30.221
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:30.221
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:30.222
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:32.202
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:32.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:32.203
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:32.327
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:32.327
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:32.328
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:33.558
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:33.559
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:33.560
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:34.571
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:34.571
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:34.572
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:38.042
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:38.043
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:38.043
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:39.931
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:39.932
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:39.932
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:42.382
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
           	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:42.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:42.384
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:42.559
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
           	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:42.560
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:42.560
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:43.185
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:43.186
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:43.187
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:43.368
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:43.369
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:43.370
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:44.064
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (   Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:44.065
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:44.065
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:45.890
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (    Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-06 15:12:45.891
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-06 15:12:45.892
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:46.031
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (    Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:46.032
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:46.032
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:49.541
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (    Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:49.542
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:49.542
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:52.254
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (    Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:52.255
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:52.256
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:53.379
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (    Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:53.380
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:53.380
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-06 15:12:54.203
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.util.Arrays;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4i;

import app_interface.IntBufferWrapper;

public class BarycentricCoordinates {
    private Vector3f barycentricCoordinates;

    private Vector3f LineOppositeToV1;
    private Vector3f LineOppositeToV2;
    private Vector3f LineOppositeToV3;
    private float V1distanceToLine;
    private float V2distanceToLine;
    private float V3distanceToLine;
    
	public BarycentricCoordinates(Vector2f v1, Vector2f v2, Vector2f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	public BarycentricCoordinates(Vector3f v1, Vector3f v2, Vector3f v3) {
        LineOppositeToV1 = lineFrom2Points(v2, v3);
		LineOppositeToV2 = lineFrom2Points(v1, v3);
		LineOppositeToV3 = lineFrom2Points(v1, v2);
		V1distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV1, v1);
		V2distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV2, v2);
		V3distanceToLine = semiDistanceOfPointFromLine(LineOppositeToV3, v3);
	}
	
	public float getAlpha() {
		return barycentricCoordinates.get(0);
	}
	
	public float getBeta() {
		return barycentricCoordinates.get(1);
	}
	
	public float getGamma() {
		return barycentricCoordinates.get(2);
	}
	
	public Vector3f getCoordinates() {
		return new Vector3f(barycentricCoordinates);
	}

	@Override
	public String toString() {
		return String.format("Alpha:%.2f, Beta:%.2f, Gamma:%.2f.",getAlpha(),getBeta(), getGamma());
	}

	public boolean isPointInside() {
		return ((barycentricCoordinates.get(0) >= 0) && (barycentricCoordinates.get(1) >= 0)
			&& (barycentricCoordinates.get(2) >= 0) && (barycentricCoordinates.get(0) <= 1)
			&& (barycentricCoordinates.get(1) <= 1) && (barycentricCoordinates.get(2) <= 1)); 
	}
	
	public void calcCoordinatesForPoint(Vector2f point) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, point) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, point) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, point) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}
	public void calcCoordinatesForPoint(float x, float y) {
		float BarycentricAlfa = semiDistanceOfPointFromLine(LineOppositeToV1, x, y) / V1distanceToLine;
		float BarycentricBeta = semiDistanceOfPointFromLine(LineOppositeToV2, x, y) / V2distanceToLine;
		float BarycentricGama = semiDistanceOfPointFromLine(LineOppositeToV3, x, y) / V3distanceToLine;
		barycentricCoordinates = new Vector3f(BarycentricAlfa, BarycentricBeta, BarycentricGama);
	}

	public float interpolate(float p1_property, float p2_property, float p3_property) {
		return barycentricCoordinates.get(0) * p1_property + barycentricCoordinates.get(1) * p2_property
				+ barycentricCoordinates.get(2) * p3_property;
	}

	public Vector2f interpolate(Vector2f p1_property, Vector2f p2_property, Vector2f p3_property) {
		float x = p1_property.x * barycentricCoordinates.get(0) + p2_property.x * barycentricCoordinates.get(1)
				+ p3_property.x * barycentricCoordinates.get(2);
		float y = p1_property.y * barycentricCoordinates.get(0) + p2_property.y * barycentricCoordinates.get(1)
				+ p3_property.y * barycentricCoordinates.get(2);
		return new Vector2f(x, y);
	}

	public Vector3f interpolate(Vector3f p1_property, Vector3f p2_property, Vector3f p3_property) {
		float x = p1_property.x * barycentricCoordinates.x + p2_property.x * barycentricCoordinates.y
				+ p3_property.x * barycentricCoordinates.z;
		float y = p1_property.y * barycentricCoordinates.x + p2_property.y * barycentricCoordinates.y
				+ p3_property.y * barycentricCoordinates.z;
		float z = p1_property.z * barycentricCoordinates.x + p2_property.z * barycentricCoordinates.y
				+ p3_property.z * barycentricCoordinates.z;
		return new Vector3f(x, y, z);
	}

	private static Vector3f lineFrom2Points(Vector3f p1, Vector3f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(Vector2f p1, Vector2f p2) {
		return new Vector3f(p2.y - p1.y, -(p2.x - p1.x), p1.y * p2.x - p1.x * p2.y);
	}
	private static Vector3f lineFrom2Points(float x1, float y1, float x2, float y2) {
		return new Vector3f(y2 - y1, -(x2 - x1), y1 * x2 - x1 * y2);
	}

	private static float semiDistanceOfPointFromLine(Vector3f line, Vector3f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, Vector2f p) {
		return line.get(0) * p.x + line.get(1) * p.y + line.get(2);
	}
	private static float semiDistanceOfPointFromLine(Vector3f line, float x, float y) {
		return line.get(0) * x + line.get(1) *y + line.get(2);
	}

	
	

	
	public static void main(String[] args) {
		System.out.println("Face rasterization unit tests");
		System.out.println("========================");
		testLineFrom2Points();
        testDistanceOfPointFromLine2D();
        testDistanceOfPointFromLine3D();
//        testCalcBarycentricCoordinates();
		
		System.out.println("Interpolation unit tests");
		System.out.println("========================");
//        testFloatBarycentricInterpolation();
//        testVector2fBarycentricInterpolation();
//        testVector3fBarycentricInterpolation();
	}

	

	
	// Face rasterization unit tests
	////////////////////////////////////////////////////////
    private static void testLineFrom2Points() {
    	Vector3f p1 = new Vector3f(1, 2, 0);
        Vector3f p2 = new Vector3f(4, 6, 0);

        Vector3f result = lineFrom2Points(p1, p2);
        Vector3f expected = new Vector3f(4, -3, 2);

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testLineFrom2Points passed.");
        } else {
            System.out.println("testLineFrom2Points failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine2D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector2f point = new Vector2f(51, 96);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine2D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine2D failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testDistanceOfPointFromLine3D() {
        Vector3f line = new Vector3f(3.1f, -1.7f, -4f);
        Vector3f point = new Vector3f(51, 96, 100);

        float result = semiDistanceOfPointFromLine(line, point);
        float expected = 3.1f*51.0f - 1.7f*96.0f - 4.0f; // Distance from line 3.1x -1.7y -4

        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testDistanceOfPointFromLine3D passed.");
        } else {
            System.out.println("testDistanceOfPointFromLine3D failed. Result: " + result + ", Expected: " + expected);
        }
    }	
	
    private static void testCalcBarycentricCoordinates() {
        Vector3f v1 = new Vector3f( 40, 100, 0);
        Vector3f v2 = new Vector3f(120, 470, 0);
        Vector3f v3 = new Vector3f(300, 220, 0);

        // Test point inside the rectangle
        Vector2f testPoint = new Vector2f(200, 500); 

        BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(v1, v2, v3);
        barycentricCoordinates.calcCoordinatesForPoint(testPoint);
        Vector3f result = barycentricCoordinates.getCoordinates(); 
        		
        // Expected barycentric coordinates
        Vector3f expected = new Vector3f(-0.293f, 0.979f, 0.314f); 

        // Check if the barycentric coordinates sum to approximately 1
        boolean passed = Math.abs(result.x + result.y + result.z - 1.0f) < 0.01;
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
        // Check if the barycentric coordinates sum to approximately 1
        if (    Math.abs(result.x - expected.x) < 1e-6 
            	&& Math.abs(result.y - expected.y) < 1e-6) {
          	    && Math.abs(result.z - expected.z) < 1e-6) {
        
        if (passed) {
            System.out.println("testCalcBarycentricCoordinates sum to 1 - passed.\n");
        } else {
            System.out.println("testCalcBarycentricCoordinates failed. Result: " + barycentricCoordinates + ", Expected: " + expectedBaryCoords + "\n");
        }
        
    }    
    
	// Interpolation with baricentric coordinates unit tests
	/////////////////////////////////////////////////////////////
    
    private static void testFloatBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.2f, 0.3f, 0.5f);
        float p1 = 10.0f, p2 = 20.0f, p3 = 30.0f;

        float result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        float expected = 0.2f * p1 + 0.3f * p2 + 0.5f * p3;
        if (Math.abs(result - expected) < 1e-6) {
            System.out.println("testFloatBarycentricInterpolation passed.");
        } else {
            System.out.println("testFloatBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector2fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.25f, 0.5f, 0.25f);
        Vector2f p1 = new Vector2f(1.0f, 2.0f), p2 = new Vector2f(3.0f, 4.0f), p3 = new Vector2f(5.0f, 6.0f);

        Vector2f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector2f expected = new Vector2f(
            p1.x * 0.25f + p2.x * 0.5f + p3.x * 0.25f,
            p1.y * 0.25f + p2.y * 0.5f + p3.y * 0.25f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 && Math.abs(result.y - expected.y) < 1e-6) {
            System.out.println("testVector2fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector2fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }

    private static void testVector3fBarycentricInterpolation() {
        Vector3f barycentricCoordinates = new Vector3f(0.1f, 0.6f, 0.3f);
        Vector3f p1 = new Vector3f(1.0f, 2.0f, 3.0f), p2 = new Vector3f(4.0f, 5.0f, 6.0f), p3 = new Vector3f(7.0f, 8.0f, 9.0f);

        Vector3f result = ObjectModel.barycentricInterpolation(barycentricCoordinates, p1, p2, p3);

        Vector3f expected = new Vector3f(
            p1.x * 0.1f + p2.x * 0.6f + p3.x * 0.3f,
            p1.y * 0.1f + p2.y * 0.6f + p3.y * 0.3f,
            p1.z * 0.1f + p2.z * 0.6f + p3.z * 0.3f
        );

        if (Math.abs(result.x - expected.x) < 1e-6 &&
            Math.abs(result.y - expected.y) < 1e-6 &&
            Math.abs(result.z - expected.z) < 1e-6) {
            System.out.println("testVector3fBarycentricInterpolation passed.");
        } else {
            System.out.println("testVector3fBarycentricInterpolation failed. Result: " + result + ", Expected: " + expected);
        }
    }
    */
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-12-06 15:12:54.204
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-12-06 15:12:54.204
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.ui.ide 4 4 2024-12-06 18:16:58.880
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:668)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:300)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:230)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:55)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LazyResourceManager.create(LazyResourceManager.java:103)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:72)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:175)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.getImage(AbstractContributionItem.java:151)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.updateIcons(AbstractContributionItem.java:177)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.update(AbstractContributionItem.java:127)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.fill(AbstractContributionItem.java:264)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:729)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:806)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.scheduleManagerUpdate(MenuManagerRenderer.java:1227)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContents(MenuManagerRenderer.java:655)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.subscribeTopicChildAdded(MenuManagerRenderer.java:325)
	at jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4803)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.internal.di.UIEventObjectSupplier$UIEventHandler.handleEvent(UIEventObjectSupplier.java:64)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.emf.ecore.util.EcoreEList.dispatchNotification(EcoreEList.java:249)
	at org.eclipse.emf.common.notify.impl.NotifyingListImpl.addUnique(NotifyingListImpl.java:356)
	at org.eclipse.emf.common.util.AbstractEList.add(AbstractEList.java:340)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributionRecord.mergeIntoModel(ContributionRecord.java:253)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processAddition(MenuManagerRenderer.java:551)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.generateContributions(MenuManagerRenderer.java:531)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContributions(MenuManagerRenderer.java:499)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContributions(MenuManagerRenderer.java:502)
	at org.eclipse.ui.internal.PopupMenuExtender.addMenuContributions(PopupMenuExtender.java:380)
	at org.eclipse.ui.internal.PopupMenuExtender.menuAboutToShow(PopupMenuExtender.java:355)
	at org.eclipse.jface.action.MenuManager.fireAboutToShow(MenuManager.java:338)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:468)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:495)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:259)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4274)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1071)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:5140)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4772)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2306)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.TrackPopupMenu(Native Method)
	at org.eclipse.swt.widgets.Menu._setVisible(Menu.java:237)
	at org.eclipse.swt.widgets.Display.runPopups(Display.java:4113)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3654)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2024-12-06 18:16:58.897
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:668)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:300)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:230)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:55)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LazyResourceManager.create(LazyResourceManager.java:103)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:72)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:175)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.getImage(AbstractContributionItem.java:151)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.updateIcons(AbstractContributionItem.java:177)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.update(AbstractContributionItem.java:127)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.fill(AbstractContributionItem.java:264)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:729)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:806)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.scheduleManagerUpdate(MenuManagerRenderer.java:1227)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContents(MenuManagerRenderer.java:655)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.subscribeTopicChildAdded(MenuManagerRenderer.java:325)
	at jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4803)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.internal.di.UIEventObjectSupplier$UIEventHandler.handleEvent(UIEventObjectSupplier.java:64)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.emf.ecore.util.EcoreEList.dispatchNotification(EcoreEList.java:249)
	at org.eclipse.emf.common.notify.impl.NotifyingListImpl.addUnique(NotifyingListImpl.java:356)
	at org.eclipse.emf.common.util.AbstractEList.add(AbstractEList.java:340)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributionRecord.mergeIntoModel(ContributionRecord.java:253)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processAddition(MenuManagerRenderer.java:551)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.generateContributions(MenuManagerRenderer.java:531)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContributions(MenuManagerRenderer.java:499)
	at org.eclipse.ui.internal.PopupMenuExtender.addMenuContributions(PopupMenuExtender.java:380)
	at org.eclipse.ui.internal.PopupMenuExtender.menuAboutToShow(PopupMenuExtender.java:355)
	at org.eclipse.jface.action.MenuManager.fireAboutToShow(MenuManager.java:338)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:468)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:495)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:259)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4274)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1071)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:5140)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4772)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2306)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.TrackPopupMenu(Native Method)
	at org.eclipse.swt.widgets.Menu._setVisible(Menu.java:237)
	at org.eclipse.swt.widgets.Display.runPopups(Display.java:4113)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3654)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2024-12-06 18:16:58.900
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:668)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:300)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:230)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:55)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LazyResourceManager.create(LazyResourceManager.java:103)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:72)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:175)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.getImage(AbstractContributionItem.java:151)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.updateIcons(AbstractContributionItem.java:177)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.update(AbstractContributionItem.java:127)
	at org.eclipse.e4.ui.workbench.renderers.swt.AbstractContributionItem.fill(AbstractContributionItem.java:264)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:729)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:806)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.scheduleManagerUpdate(MenuManagerRenderer.java:1227)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContents(MenuManagerRenderer.java:655)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.subscribeTopicChildAdded(MenuManagerRenderer.java:325)
	at jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4803)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.internal.di.UIEventObjectSupplier$UIEventHandler.handleEvent(UIEventObjectSupplier.java:64)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.emf.ecore.util.EcoreEList.dispatchNotification(EcoreEList.java:249)
	at org.eclipse.emf.common.notify.impl.NotifyingListImpl.addUnique(NotifyingListImpl.java:356)
	at org.eclipse.emf.common.util.AbstractEList.add(AbstractEList.java:340)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributionRecord.mergeIntoModel(ContributionRecord.java:253)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processAddition(MenuManagerRenderer.java:551)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.generateContributions(MenuManagerRenderer.java:531)
	at org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer.processContributions(MenuManagerRenderer.java:499)
	at org.eclipse.ui.internal.PopupMenuExtender.addMenuContributions(PopupMenuExtender.java:380)
	at org.eclipse.ui.internal.PopupMenuExtender.menuAboutToShow(PopupMenuExtender.java:355)
	at org.eclipse.jface.action.MenuManager.fireAboutToShow(MenuManager.java:338)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:468)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:495)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:259)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4274)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1071)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:5140)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4772)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2306)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.TrackPopupMenu(Native Method)
	at org.eclipse.swt.widgets.Menu._setVisible(Menu.java:237)
	at org.eclipse.swt.widgets.Display.runPopups(Display.java:4113)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3654)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SESSION 2024-12-07 09:39:14.065 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.8.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2024-12-07 09:40:18.215
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-12-07 09:40:18.215
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2024-12-07 09:40:24.222
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\win1'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-12-08 10:35:39.243 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.8.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2024-12-08 10:39:34.390
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-12-08 10:39:34.390
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2024-12-08 10:39:39.034
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\win1'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2024-12-08 12:10:31.714
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.io.IOException;
import java.util.List;

import org.joml.Matrix3f;
import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.joml.Vector4i;

import app_interface.DisplayTypeEnum;
import app_interface.ExerciseEnum;
import app_interface.IntBufferWrapper;
import app_interface.OBJLoader;
import app_interface.TriangleFace;

public class ObjectModel {
	WorldModel worldModel;

	private int imageWidth;
	private int imageHeight;

	private List<VertexData> verticesData;
	private List<TriangleFace> faces;
	private IntBufferWrapper textureImageIntBufferWrapper;

	private Matrix4f modelM = new Matrix4f();
	private Matrix4f lookatM = new Matrix4f();
	private Matrix4f modelviewM = new Matrix4f();
	private Matrix4f projectionM = new Matrix4f();
	private Matrix4f viewportM = new Matrix4f();
	private Vector3f boundingBoxDimensions;
	private Vector3f boundingBoxCenter;

	private Vector3f lightPositionEyeCoordinates = new Vector3f();
	
	public static ExerciseEnum exercise = ExerciseEnum.EX_9___Lighting;
	
	public ObjectModel(WorldModel worldModel, int imageWidth, int imageHeight) {
		this.worldModel = worldModel;
		this.imageWidth = imageWidth;
		this.imageHeight = imageHeight;
	}

	void initTransfomations() {
		this.modelM.identity();
		this.modelM.identity();
		this.lookatM.identity();
		this.modelviewM.identity();
		this.projectionM.identity();
		this.viewportM.identity();
	}
	
	void setModelM(Matrix4f modelM) {
		this.modelM = modelM;
		modelviewM = new Matrix4f(lookatM).mul(modelM);
	}

	void setLookatM(Matrix4f lookatM) {
		this.lookatM = lookatM;
		modelviewM = new Matrix4f(lookatM).mul(modelM);
	}

	void setProjectionM(Matrix4f projectionM) {
		this.projectionM = projectionM;
	}

	void setViewportM(Matrix4f viewportM) {
		this.viewportM = viewportM;
	}

	public Vector3f getBoundingBoxDimensions() {
		return boundingBoxDimensions;
	}

	public Vector3f getBoundingBoxCenter() {
		return boundingBoxCenter;
	}

	public boolean load(String fileName) {
		OBJLoader objLoader = new OBJLoader();
		try {
			objLoader.loadOBJ(fileName);
			verticesData = objLoader.getVertices();
			faces = objLoader.getFaces();
			boundingBoxDimensions = objLoader.getBoundingBoxDimensions();
			boundingBoxCenter = objLoader.getBoundingBoxCenter();
			textureImageIntBufferWrapper = objLoader.getTextureImageIntBufferWrapper();
			return true;
		} catch (IOException e) {
			//System.err.println("Failed to load the OBJ file.");
			return false;
		}
	}
	
	public boolean objectHasTexture() {
		return textureImageIntBufferWrapper != null;
	}

	public void render(IntBufferWrapper intBufferWrapper) {
		exercise = worldModel.exercise;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
			Vector4f t1 = new Vector4f(worldModel.lightPosition, 1f);
			modelviewM.transform(t1);
			lightPositionEyeCoordinates = new Vector3f(t1.x, t1.y, t1.z);
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		
		if (verticesData != null) {
			for (VertexData vertexData : verticesData) {
				vertexProcessing(intBufferWrapper, vertexData);
			}
			for (TriangleFace face : faces) {
				rasterization(intBufferWrapper,	
						verticesData.get(face.indices[0]), 
						verticesData.get(face.indices[1]), 
						verticesData.get(face.indices[2]), 
						face.color);
			}
		}
	}

	private void vertexProcessing(IntBufferWrapper intBufferWrapper, VertexData vertex) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() <= ExerciseEnum.EX_3_3_Object_transformation___4_objects.ordinal()) {
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			// Initialize a 4D vector from the 3D vertex point
			Vector4f t = new Vector4f(vertex.point3D, 1f);
	
			// Transform only model transformation
			modelM.transform(t);
	
			vertex.pointScreen = new Vector3f(t.x, t.y, t.z);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		}
		else {
			// Initialize a 4D vector from the 3D vertex point
			Vector4f t = new Vector4f(vertex.point3D, 1f);
	
			// Transform to eye coordinates (model-view transformation)
			if (exercise.ordinal() < ExerciseEnum.EX_5___lookat.ordinal()) {
				modelM.transform(t);
			} else {
				modelviewM.transform(t);
			}
			vertex.point3DeyeCoordinates = new Vector3f(t.x, t.y, t.z);
	
			// Apply projection transformation
			projectionM.transform(t);
	
			// Perspective divide if w is non-zero
			if (t.w != 0) {
				t.mul(1 / t.w);
			} else {
				System.err.println("Division by w == 0 in vertexProcessing");
			}
	
			// Apply viewport transformation and set screen point
			viewportM.transform(t);
			vertex.pointScreen = new Vector3f(t.x, t.y, t.z);
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		// transformation normal from object coordinates to eye coordinates v->normal
		///////////////////////////////////////////////////////////////////////////////////
		transformNormalFromObjectCoordToEyeCoordAndDrawIt(intBufferWrapper, vertex);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
			vertex.lightingIntensity0to1 = lightingEquation(vertex.point3DeyeCoordinates, vertex.normalEyeCoordinates,
					lightPositionEyeCoordinates, worldModel.lighting_Diffuse, worldModel.lighting_Specular,
					worldModel.lighting_Ambient, worldModel.lighting_sHininess);
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

	}

	private void transformNormalFromObjectCoordToEyeCoordAndDrawIt(IntBufferWrapper intBufferWrapper, VertexData vertex) {
		// transformation normal from object coordinates to eye coordinates v->normal
		///////////////////////////////////////////////////////////////////////////////////
		// --> v->NormalEyeCoordinates
		Matrix3f modelviewM3x3 = new Matrix3f();
		modelviewM.get3x3(modelviewM3x3);
		vertex.normalEyeCoordinates = new Vector3f();
		modelviewM3x3.transform(vertex.normal, vertex.normalEyeCoordinates);
		if (worldModel.displayNormals) {
			// drawing normals
			Vector3f t1 = new Vector3f(vertex.normalEyeCoordinates);
			Vector4f point3D_plusNormal_eyeCoordinates = new Vector4f(t1.mul(0.1f).add(vertex.point3DeyeCoordinates),
					1);
			Vector4f t2 = new Vector4f(point3D_plusNormal_eyeCoordinates);
			// modelviewM.transform(t2);
			projectionM.transform(t2);
			if (t2.w != 0) {
				t2.mul(1 / t2.w);
			} else {
				System.err.println("Division by w == 0 in vertexProcessing normal transformation");
			}
			viewportM.transform(t2);
			Vector3f point3D_plusNormal_screen = new Vector3f(t2.x, t2.y, t2.z);
			drawLineDDA(intBufferWrapper, vertex.pointScreen, point3D_plusNormal_screen, 0, 0, 1f);
		}
		
	}
	
	
	private void rasterization(IntBufferWrapper intBufferWrapper, VertexData vertex1, VertexData vertex2, VertexData vertex3, Vector3f faceColor) {

		Vector3f faceNormal = new Vector3f().add(vertex1.normalEyeCoordinates)
					.add(vertex2.normalEyeCoordinates)
					.add(vertex3.normalEyeCoordinates)
					.div(3.0f);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise == ExerciseEnum.EX_0___Starting_point) {
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			intBufferWrapper.setPixel((int) vertex1.pointScreen.x, (int) vertex1.pointScreen.y, 1f, 1f, 1f);
			intBufferWrapper.setPixel((int) vertex2.pointScreen.x, (int) vertex2.pointScreen.y, 1f, 1f, 1f);
			intBufferWrapper.setPixel((int) vertex3.pointScreen.x, (int) vertex3.pointScreen.y, 1f, 1f, 1f);
			

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		if (worldModel.displayType == DisplayTypeEnum.FACE_EDGES) {
			
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			if (exercise.ordinal() >= ExerciseEnum.EX_1___Lines_rasterization.ordinal()) {
				drawLineDDA(intBufferWrapper, vertex1.pointScreen, vertex2.pointScreen, 1f, 1f, 1f);
				drawLineDDA(intBufferWrapper, vertex2.pointScreen, vertex3.pointScreen, 1f, 1f, 1f);
				drawLineDDA(intBufferWrapper, vertex3.pointScreen, vertex1.pointScreen, 1f, 1f, 1f);
			}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		} else {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			if (exercise.ordinal() >= ExerciseEnum.EX_2___Triangles_rasterization.ordinal()) {

				BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(vertex1.pointScreen, vertex2.pointScreen, vertex3.pointScreen); 

				Vector4i boundingBox = calcBoundingBox(vertex1.pointScreen, vertex2.pointScreen, vertex3.pointScreen, imageWidth, imageHeight); 
				for (int x = boundingBox.get(0); x <= boundingBox.get(1); x++) {
					for (int y = boundingBox.get(2); y <= boundingBox.get(3); y++) {
						barycentricCoordinates.calcCoordinatesForPoint(x,y);

						if(barycentricCoordinates.isPointInside()) {

							FragmentData fragmentData = new FragmentData();

							if (worldModel.displayType == DisplayTypeEnum.FACE_COLOR) {
								fragmentData.pixelColor = faceColor;
							}

							if (exercise.ordinal() >= ExerciseEnum.EX_7___Vertex_color_interpolation.ordinal())
								if (worldModel.displayType == DisplayTypeEnum.INTERPOlATED_VERTEX_COLOR) {
									fragmentData.pixelColor = barycentricCoordinates.interpolate(
											vertex1.color, vertex2.color, vertex3.color);
								}

							if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
								if (worldModel.displayType == DisplayTypeEnum.LIGHTING_FLAT) {
									fragmentData.pixelIntensity0to1 = 
											lightingEquation(vertex1.point3DeyeCoordinates, faceNormal,
													lightPositionEyeCoordinates, worldModel.lighting_Diffuse,
													worldModel.lighting_Specular, worldModel.lighting_Ambient,
													worldModel.lighting_sHininess);
								} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_GOURARD) {
									fragmentData.pixelIntensity0to1 = 
											barycentricCoordinates.interpolate(
													vertex1.lightingIntensity0to1, vertex2.lightingIntensity0to1, vertex3.lightingIntensity0to1);
								} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_PHONG) {
									fragmentData.point3DeyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.point3DeyeCoordinates, vertex2.point3DeyeCoordinates, vertex3.point3DeyeCoordinates);
									fragmentData.normalEyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.normalEyeCoordinates, vertex2.normalEyeCoordinates, vertex3.normalEyeCoordinates);
								}
							}
							if (exercise.ordinal() >= ExerciseEnum.EX_10__Texture.ordinal()) {
								if (worldModel.displayType == DisplayTypeEnum.TEXTURE) {
									fragmentData.textureCoordinates = barycentricCoordinates.interpolate(
											vertex1.textureCoordinates,	vertex2.textureCoordinates, vertex3.textureCoordinates);
								}
								if (worldModel.displayType == DisplayTypeEnum.TEXTURE_LIGHTING) {
									//calculating texture
									fragmentData.textureCoordinates = barycentricCoordinates.interpolate(
											vertex1.textureCoordinates,	vertex2.textureCoordinates, vertex3.textureCoordinates);

									//calculating phong shading
									fragmentData.point3DeyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.point3DeyeCoordinates, vertex2.point3DeyeCoordinates, vertex3.point3DeyeCoordinates);
									fragmentData.normalEyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.normalEyeCoordinates, vertex2.normalEyeCoordinates, vertex3.normalEyeCoordinates);
								}

							}

							if (exercise.ordinal() >= ExerciseEnum.EX_8___Z_buffer.ordinal()) {
								float pixelZ = barycentricCoordinates.interpolate(vertex1.pointScreen.z,
										vertex2.pointScreen.z, vertex3.pointScreen.z);
								if (pixelZ < worldModel.zBuffer[y][x]) {
									worldModel.zBuffer[y][x] = pixelZ;

									Vector3f pixelColor = fragmentProcessing(fragmentData);

									intBufferWrapper.setPixel((int) x, (int) y, pixelColor);
								}
							} else {
								Vector3f pixelColor = fragmentProcessing(fragmentData);
								intBufferWrapper.setPixel((int) x, (int) y, pixelColor);
							}


						}

					}
				}
			}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		}
		
	}


	private Vector3f fragmentProcessing(FragmentData fragmentData) {
		Vector3f pixelColor = new Vector3f();
		if (worldModel.displayType == DisplayTypeEnum.FACE_COLOR) {
			return fragmentData.pixelColor;
		}

		if (exercise.ordinal() >= ExerciseEnum.EX_7___Vertex_color_interpolation.ordinal())
			if (worldModel.displayType == DisplayTypeEnum.INTERPOlATED_VERTEX_COLOR) {
				return fragmentData.pixelColor;
			}

		if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
			if (worldModel.displayType == DisplayTypeEnum.LIGHTING_FLAT) {
				return new Vector3f(fragmentData.pixelIntensity0to1);
			} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_GOURARD) {
				return new Vector3f(fragmentData.pixelIntensity0to1);
			} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_PHONG) {
				float pixellightingIntensity = 
						lightingEquation(fragmentData.point3DeyeCoordinates, fragmentData.normalEyeCoordinates,
								lightPositionEyeCoordinates, worldModel.lighting_Diffuse,
								worldModel.lighting_Specular, worldModel.lighting_Ambient,
								worldModel.lighting_sHininess);
				return new Vector3f(pixellightingIntensity);
			}
		}
		if (exercise.ordinal() >= ExerciseEnum.EX_10__Texture.ordinal()) {
			if (worldModel.displayType == DisplayTypeEnum.TEXTURE) {
				//calculating texture
				Vector3f textureColor = textureImageIntBufferWrapper.getPixel(
						(int)Math.round(fragmentData.textureCoordinates.x * (textureImageIntBufferWrapper.getImageWidth()-1)), 
						(int)Math.round(fragmentData.textureCoordinates.y * (textureImageIntBufferWrapper.getImageHeight()-1)));
				return textureColor;
			}
			if (worldModel.displayType == DisplayTypeEnum.TEXTURE_LIGHTING) {
				//calculating texture
				Vector3f textureColor = textureImageIntBufferWrapper.getPixel(
						(int)Math.round(fragmentData.textureCoordinates.x * (textureImageIntBufferWrapper.getImageWidth()-1)), 
						(int)Math.round(fragmentData.textureCoordinates.y * (textureImageIntBufferWrapper.getImageHeight()-1)));

				//calculating phong shading
				float pixellightingIntensity = 
						lightingEquation(fragmentData.point3DeyeCoordinates, fragmentData.normalEyeCoordinates,
								lightPositionEyeCoordinates, worldModel.lighting_Diffuse,
								worldModel.lighting_Specular, worldModel.lighting_Ambient,
								worldModel.lighting_sHininess);
				
				//multiplying between the texture and the lighting intensity
				return textureColor.mul(pixellightingIntensity);
			}
		}
		return new Vector3f();
	}

	

	static void drawLineDDA(IntBufferWrapper intBufferWrapper, Vector3f p1, Vector3f p2, float r, float g, float b) {
		int x1round = Math.round(p1.x);
		int y1round = Math.round(p1.y);
		int x2round = Math.round(p2.x);
		int y2round = Math.round(p2.y);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_1___Lines_rasterization.ordinal()) {

			int x1, y1, x2, y2;
//			if ((y2round - y1round) < -(x2round - x1round)
//					|| ((y2round - y1round) == -(x2round - x1round)) && ((x2round - x1round) < 0)) {
			(y2round - y1round) * (x2round - x1round) < 0			
				x1 = Math.round(p2.x);
				y1 = Math.round(p2.y);
				x2 = Math.round(p1.x);
				y2 = Math.round(p1.y);
			} else {
				x1 = Math.round(p1.x);
				y1 = Math.round(p1.y);
				x2 = Math.round(p2.x);
				y2 = Math.round(p2.y);
			}

			float dx = x2 - x1;
			float dy = y2 - y1;
			if (Math.abs(dy) <= Math.abs(dx)) {
				float a = (dx == 0) ? 0 : dy / dx; // Avoid division by zero
				float y = y1;
				int yi;
				for (int x = x1; x < x2; x++) {
					yi = Math.round(y);
					intBufferWrapper.setPixel(x, yi, r, g, b);
					y = y + a;
				}
			} else {
				float a = (dy == 0) ? 0 : dx / dy; // Avoid division by zero
				float x = x1;
				int xi;
				for (int y = y1; y < y2; y++) {
					xi = Math.round(x);
					intBufferWrapper.setPixel(xi, y, r, g, b);
					x = x + a;
				}
			}
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		
	}



	static Vector4i calcBoundingBox(Vector3f p1, Vector3f p2, Vector3f p3, int imageWidth, int imageHeight) { 

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
// EX_2___Triangles_rasterization
		int minX = (int) Math.floor(Math.max(0.0f, 
				Math.min(Math.min(p1.x, p2.x), p3.x)));
		int minY = (int) Math.floor(Math.max(0.0f, 
				Math.min(Math.min(p1.y, p2.y), p3.y)));
		int maxX = (int) Math.ceil(Math.min((float) imageWidth - 1, 
				Math.max(Math.max(p1.x, p2.x), p3.x)));
		int maxY = (int) Math.ceil(Math.min((float) imageHeight - 1, 
				Math.max(Math.max(p1.y, p2.y), p3.y)));
		return new Vector4i(minX, maxX, minY, maxY);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
//		return new Vector4i();
////////////////////////////////////////////////////////////////////////////////////

	}

	
	float lightingEquation(Vector3f point, Vector3f PointNormal, Vector3f LightPos, float Kd, float Ks, float Ka, float shininess) {

		Vector3f color = lightingEquation(point, PointNormal, LightPos, 
				                          new Vector3f(Kd), new Vector3f(Ks), new Vector3f(Ka), shininess);
		return color.get(0);
	}
	
	
	private static Vector3f lightingEquation(Vector3f point, Vector3f PointNormal, Vector3f LightPos, Vector3f Kd,
			Vector3f Ks, Vector3f Ka, float shininess) {

		Vector3f returnedColor = new Vector3f();

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
	if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
		// LightDirection
		Vector3f LightDirection = new Vector3f(LightPos).sub(point).normalize();

		// Diffuse component: Kd * ( max(0, N · L ))
		float NdotL = PointNormal.dot(LightDirection);
		Vector3f diffuse = new Vector3f(Kd).mul(Math.max(0.0f, NdotL));
		returnedColor.add(diffuse);

		// Ambient component: Ka
		Vector3f ambient = new Vector3f(Ka);
		returnedColor.add(ambient);

		// Specular component: Ks * ( max(0, R · V) )^n
		// EyeDirection
		Vector3f EyePos = new Vector3f(0, 0, 0);
		Vector3f EyeDirection = new Vector3f(EyePos).sub(point).normalize();

		// Calculate ReflectionDirection based on LightDirection and PointNormal
		NdotL = PointNormal.dot(LightDirection);
		Vector3f ReflectionDirection;
		if (NdotL > 0) {
			ReflectionDirection = new Vector3f(PointNormal).mul(2.0f * NdotL).sub(LightDirection).normalize();
		} else {
			ReflectionDirection = new Vector3f(0, 0, 0);
		}

		// Specular component: Ks * (R · V)^n (guarding against negative R · V)
		float RdotV = Math.max(0.0f, ReflectionDirection.dot(EyeDirection));
		Vector3f specular = new Vector3f(Ks).mul((float) Math.pow(RdotV, shininess));
		returnedColor.add(specular);
	}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		return returnedColor;
	}	
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-12-08 12:10:31.716
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-12-08 12:10:31.717
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-12-08 12:10:31.755
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package your_code;

import java.io.IOException;
import java.util.List;

import org.joml.Matrix3f;
import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.joml.Vector4i;

import app_interface.DisplayTypeEnum;
import app_interface.ExerciseEnum;
import app_interface.IntBufferWrapper;
import app_interface.OBJLoader;
import app_interface.TriangleFace;

public class ObjectModel {
	WorldModel worldModel;

	private int imageWidth;
	private int imageHeight;

	private List<VertexData> verticesData;
	private List<TriangleFace> faces;
	private IntBufferWrapper textureImageIntBufferWrapper;

	private Matrix4f modelM = new Matrix4f();
	private Matrix4f lookatM = new Matrix4f();
	private Matrix4f modelviewM = new Matrix4f();
	private Matrix4f projectionM = new Matrix4f();
	private Matrix4f viewportM = new Matrix4f();
	private Vector3f boundingBoxDimensions;
	private Vector3f boundingBoxCenter;

	private Vector3f lightPositionEyeCoordinates = new Vector3f();
	
	public static ExerciseEnum exercise = ExerciseEnum.EX_9___Lighting;
	
	public ObjectModel(WorldModel worldModel, int imageWidth, int imageHeight) {
		this.worldModel = worldModel;
		this.imageWidth = imageWidth;
		this.imageHeight = imageHeight;
	}

	void initTransfomations() {
		this.modelM.identity();
		this.modelM.identity();
		this.lookatM.identity();
		this.modelviewM.identity();
		this.projectionM.identity();
		this.viewportM.identity();
	}
	
	void setModelM(Matrix4f modelM) {
		this.modelM = modelM;
		modelviewM = new Matrix4f(lookatM).mul(modelM);
	}

	void setLookatM(Matrix4f lookatM) {
		this.lookatM = lookatM;
		modelviewM = new Matrix4f(lookatM).mul(modelM);
	}

	void setProjectionM(Matrix4f projectionM) {
		this.projectionM = projectionM;
	}

	void setViewportM(Matrix4f viewportM) {
		this.viewportM = viewportM;
	}

	public Vector3f getBoundingBoxDimensions() {
		return boundingBoxDimensions;
	}

	public Vector3f getBoundingBoxCenter() {
		return boundingBoxCenter;
	}

	public boolean load(String fileName) {
		OBJLoader objLoader = new OBJLoader();
		try {
			objLoader.loadOBJ(fileName);
			verticesData = objLoader.getVertices();
			faces = objLoader.getFaces();
			boundingBoxDimensions = objLoader.getBoundingBoxDimensions();
			boundingBoxCenter = objLoader.getBoundingBoxCenter();
			textureImageIntBufferWrapper = objLoader.getTextureImageIntBufferWrapper();
			return true;
		} catch (IOException e) {
			//System.err.println("Failed to load the OBJ file.");
			return false;
		}
	}
	
	public boolean objectHasTexture() {
		return textureImageIntBufferWrapper != null;
	}

	public void render(IntBufferWrapper intBufferWrapper) {
		exercise = worldModel.exercise;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
			Vector4f t1 = new Vector4f(worldModel.lightPosition, 1f);
			modelviewM.transform(t1);
			lightPositionEyeCoordinates = new Vector3f(t1.x, t1.y, t1.z);
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		
		if (verticesData != null) {
			for (VertexData vertexData : verticesData) {
				vertexProcessing(intBufferWrapper, vertexData);
			}
			for (TriangleFace face : faces) {
				rasterization(intBufferWrapper,	
						verticesData.get(face.indices[0]), 
						verticesData.get(face.indices[1]), 
						verticesData.get(face.indices[2]), 
						face.color);
			}
		}
	}

	private void vertexProcessing(IntBufferWrapper intBufferWrapper, VertexData vertex) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() <= ExerciseEnum.EX_3_3_Object_transformation___4_objects.ordinal()) {
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			// Initialize a 4D vector from the 3D vertex point
			Vector4f t = new Vector4f(vertex.point3D, 1f);
	
			// Transform only model transformation
			modelM.transform(t);
	
			vertex.pointScreen = new Vector3f(t.x, t.y, t.z);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		}
		else {
			// Initialize a 4D vector from the 3D vertex point
			Vector4f t = new Vector4f(vertex.point3D, 1f);
	
			// Transform to eye coordinates (model-view transformation)
			if (exercise.ordinal() < ExerciseEnum.EX_5___lookat.ordinal()) {
				modelM.transform(t);
			} else {
				modelviewM.transform(t);
			}
			vertex.point3DeyeCoordinates = new Vector3f(t.x, t.y, t.z);
	
			// Apply projection transformation
			projectionM.transform(t);
	
			// Perspective divide if w is non-zero
			if (t.w != 0) {
				t.mul(1 / t.w);
			} else {
				System.err.println("Division by w == 0 in vertexProcessing");
			}
	
			// Apply viewport transformation and set screen point
			viewportM.transform(t);
			vertex.pointScreen = new Vector3f(t.x, t.y, t.z);
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		// transformation normal from object coordinates to eye coordinates v->normal
		///////////////////////////////////////////////////////////////////////////////////
		transformNormalFromObjectCoordToEyeCoordAndDrawIt(intBufferWrapper, vertex);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
			vertex.lightingIntensity0to1 = lightingEquation(vertex.point3DeyeCoordinates, vertex.normalEyeCoordinates,
					lightPositionEyeCoordinates, worldModel.lighting_Diffuse, worldModel.lighting_Specular,
					worldModel.lighting_Ambient, worldModel.lighting_sHininess);
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

	}

	private void transformNormalFromObjectCoordToEyeCoordAndDrawIt(IntBufferWrapper intBufferWrapper, VertexData vertex) {
		// transformation normal from object coordinates to eye coordinates v->normal
		///////////////////////////////////////////////////////////////////////////////////
		// --> v->NormalEyeCoordinates
		Matrix3f modelviewM3x3 = new Matrix3f();
		modelviewM.get3x3(modelviewM3x3);
		vertex.normalEyeCoordinates = new Vector3f();
		modelviewM3x3.transform(vertex.normal, vertex.normalEyeCoordinates);
		if (worldModel.displayNormals) {
			// drawing normals
			Vector3f t1 = new Vector3f(vertex.normalEyeCoordinates);
			Vector4f point3D_plusNormal_eyeCoordinates = new Vector4f(t1.mul(0.1f).add(vertex.point3DeyeCoordinates),
					1);
			Vector4f t2 = new Vector4f(point3D_plusNormal_eyeCoordinates);
			// modelviewM.transform(t2);
			projectionM.transform(t2);
			if (t2.w != 0) {
				t2.mul(1 / t2.w);
			} else {
				System.err.println("Division by w == 0 in vertexProcessing normal transformation");
			}
			viewportM.transform(t2);
			Vector3f point3D_plusNormal_screen = new Vector3f(t2.x, t2.y, t2.z);
			drawLineDDA(intBufferWrapper, vertex.pointScreen, point3D_plusNormal_screen, 0, 0, 1f);
		}
		
	}
	
	
	private void rasterization(IntBufferWrapper intBufferWrapper, VertexData vertex1, VertexData vertex2, VertexData vertex3, Vector3f faceColor) {

		Vector3f faceNormal = new Vector3f().add(vertex1.normalEyeCoordinates)
					.add(vertex2.normalEyeCoordinates)
					.add(vertex3.normalEyeCoordinates)
					.div(3.0f);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise == ExerciseEnum.EX_0___Starting_point) {
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			intBufferWrapper.setPixel((int) vertex1.pointScreen.x, (int) vertex1.pointScreen.y, 1f, 1f, 1f);
			intBufferWrapper.setPixel((int) vertex2.pointScreen.x, (int) vertex2.pointScreen.y, 1f, 1f, 1f);
			intBufferWrapper.setPixel((int) vertex3.pointScreen.x, (int) vertex3.pointScreen.y, 1f, 1f, 1f);
			

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		if (worldModel.displayType == DisplayTypeEnum.FACE_EDGES) {
			
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			if (exercise.ordinal() >= ExerciseEnum.EX_1___Lines_rasterization.ordinal()) {
				drawLineDDA(intBufferWrapper, vertex1.pointScreen, vertex2.pointScreen, 1f, 1f, 1f);
				drawLineDDA(intBufferWrapper, vertex2.pointScreen, vertex3.pointScreen, 1f, 1f, 1f);
				drawLineDDA(intBufferWrapper, vertex3.pointScreen, vertex1.pointScreen, 1f, 1f, 1f);
			}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		} else {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			if (exercise.ordinal() >= ExerciseEnum.EX_2___Triangles_rasterization.ordinal()) {

				BarycentricCoordinates barycentricCoordinates = new BarycentricCoordinates(vertex1.pointScreen, vertex2.pointScreen, vertex3.pointScreen); 

				Vector4i boundingBox = calcBoundingBox(vertex1.pointScreen, vertex2.pointScreen, vertex3.pointScreen, imageWidth, imageHeight); 
				for (int x = boundingBox.get(0); x <= boundingBox.get(1); x++) {
					for (int y = boundingBox.get(2); y <= boundingBox.get(3); y++) {
						barycentricCoordinates.calcCoordinatesForPoint(x,y);

						if(barycentricCoordinates.isPointInside()) {

							FragmentData fragmentData = new FragmentData();

							if (worldModel.displayType == DisplayTypeEnum.FACE_COLOR) {
								fragmentData.pixelColor = faceColor;
							}

							if (exercise.ordinal() >= ExerciseEnum.EX_7___Vertex_color_interpolation.ordinal())
								if (worldModel.displayType == DisplayTypeEnum.INTERPOlATED_VERTEX_COLOR) {
									fragmentData.pixelColor = barycentricCoordinates.interpolate(
											vertex1.color, vertex2.color, vertex3.color);
								}

							if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
								if (worldModel.displayType == DisplayTypeEnum.LIGHTING_FLAT) {
									fragmentData.pixelIntensity0to1 = 
											lightingEquation(vertex1.point3DeyeCoordinates, faceNormal,
													lightPositionEyeCoordinates, worldModel.lighting_Diffuse,
													worldModel.lighting_Specular, worldModel.lighting_Ambient,
													worldModel.lighting_sHininess);
								} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_GOURARD) {
									fragmentData.pixelIntensity0to1 = 
											barycentricCoordinates.interpolate(
													vertex1.lightingIntensity0to1, vertex2.lightingIntensity0to1, vertex3.lightingIntensity0to1);
								} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_PHONG) {
									fragmentData.point3DeyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.point3DeyeCoordinates, vertex2.point3DeyeCoordinates, vertex3.point3DeyeCoordinates);
									fragmentData.normalEyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.normalEyeCoordinates, vertex2.normalEyeCoordinates, vertex3.normalEyeCoordinates);
								}
							}
							if (exercise.ordinal() >= ExerciseEnum.EX_10__Texture.ordinal()) {
								if (worldModel.displayType == DisplayTypeEnum.TEXTURE) {
									fragmentData.textureCoordinates = barycentricCoordinates.interpolate(
											vertex1.textureCoordinates,	vertex2.textureCoordinates, vertex3.textureCoordinates);
								}
								if (worldModel.displayType == DisplayTypeEnum.TEXTURE_LIGHTING) {
									//calculating texture
									fragmentData.textureCoordinates = barycentricCoordinates.interpolate(
											vertex1.textureCoordinates,	vertex2.textureCoordinates, vertex3.textureCoordinates);

									//calculating phong shading
									fragmentData.point3DeyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.point3DeyeCoordinates, vertex2.point3DeyeCoordinates, vertex3.point3DeyeCoordinates);
									fragmentData.normalEyeCoordinates = barycentricCoordinates.interpolate(
											vertex1.normalEyeCoordinates, vertex2.normalEyeCoordinates, vertex3.normalEyeCoordinates);
								}

							}

							if (exercise.ordinal() >= ExerciseEnum.EX_8___Z_buffer.ordinal()) {
								float pixelZ = barycentricCoordinates.interpolate(vertex1.pointScreen.z,
										vertex2.pointScreen.z, vertex3.pointScreen.z);
								if (pixelZ < worldModel.zBuffer[y][x]) {
									worldModel.zBuffer[y][x] = pixelZ;

									Vector3f pixelColor = fragmentProcessing(fragmentData);

									intBufferWrapper.setPixel((int) x, (int) y, pixelColor);
								}
							} else {
								Vector3f pixelColor = fragmentProcessing(fragmentData);
								intBufferWrapper.setPixel((int) x, (int) y, pixelColor);
							}


						}

					}
				}
			}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		}
		
	}


	private Vector3f fragmentProcessing(FragmentData fragmentData) {
		Vector3f pixelColor = new Vector3f();
		if (worldModel.displayType == DisplayTypeEnum.FACE_COLOR) {
			return fragmentData.pixelColor;
		}

		if (exercise.ordinal() >= ExerciseEnum.EX_7___Vertex_color_interpolation.ordinal())
			if (worldModel.displayType == DisplayTypeEnum.INTERPOlATED_VERTEX_COLOR) {
				return fragmentData.pixelColor;
			}

		if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
			if (worldModel.displayType == DisplayTypeEnum.LIGHTING_FLAT) {
				return new Vector3f(fragmentData.pixelIntensity0to1);
			} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_GOURARD) {
				return new Vector3f(fragmentData.pixelIntensity0to1);
			} else if (worldModel.displayType == DisplayTypeEnum.LIGHTING_PHONG) {
				float pixellightingIntensity = 
						lightingEquation(fragmentData.point3DeyeCoordinates, fragmentData.normalEyeCoordinates,
								lightPositionEyeCoordinates, worldModel.lighting_Diffuse,
								worldModel.lighting_Specular, worldModel.lighting_Ambient,
								worldModel.lighting_sHininess);
				return new Vector3f(pixellightingIntensity);
			}
		}
		if (exercise.ordinal() >= ExerciseEnum.EX_10__Texture.ordinal()) {
			if (worldModel.displayType == DisplayTypeEnum.TEXTURE) {
				//calculating texture
				Vector3f textureColor = textureImageIntBufferWrapper.getPixel(
						(int)Math.round(fragmentData.textureCoordinates.x * (textureImageIntBufferWrapper.getImageWidth()-1)), 
						(int)Math.round(fragmentData.textureCoordinates.y * (textureImageIntBufferWrapper.getImageHeight()-1)));
				return textureColor;
			}
			if (worldModel.displayType == DisplayTypeEnum.TEXTURE_LIGHTING) {
				//calculating texture
				Vector3f textureColor = textureImageIntBufferWrapper.getPixel(
						(int)Math.round(fragmentData.textureCoordinates.x * (textureImageIntBufferWrapper.getImageWidth()-1)), 
						(int)Math.round(fragmentData.textureCoordinates.y * (textureImageIntBufferWrapper.getImageHeight()-1)));

				//calculating phong shading
				float pixellightingIntensity = 
						lightingEquation(fragmentData.point3DeyeCoordinates, fragmentData.normalEyeCoordinates,
								lightPositionEyeCoordinates, worldModel.lighting_Diffuse,
								worldModel.lighting_Specular, worldModel.lighting_Ambient,
								worldModel.lighting_sHininess);
				
				//multiplying between the texture and the lighting intensity
				return textureColor.mul(pixellightingIntensity);
			}
		}
		return new Vector3f();
	}

	

	static void drawLineDDA(IntBufferWrapper intBufferWrapper, Vector3f p1, Vector3f p2, float r, float g, float b) {
		int x1round = Math.round(p1.x);
		int y1round = Math.round(p1.y);
		int x2round = Math.round(p2.x);
		int y2round = Math.round(p2.y);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_1___Lines_rasterization.ordinal()) {

			int x1, y1, x2, y2;
//			if ((y2round - y1round) < -(x2round - x1round)
//					|| ((y2round - y1round) == -(x2round - x1round)) && ((x2round - x1round) < 0)) {
			(y2round - y1round) * (x2round - x1round) < 0			
				x1 = Math.round(p2.x);
				y1 = Math.round(p2.y);
				x2 = Math.round(p1.x);
				y2 = Math.round(p1.y);
			} else {
				x1 = Math.round(p1.x);
				y1 = Math.round(p1.y);
				x2 = Math.round(p2.x);
				y2 = Math.round(p2.y);
			}

			float dx = x2 - x1;
			float dy = y2 - y1;
			if (Math.abs(dy) <= Math.abs(dx)) {
				float a = (dx == 0) ? 0 : dy / dx; // Avoid division by zero
				float y = y1;
				int yi;
				for (int x = x1; x < x2; x++) {
					yi = Math.round(y);
					intBufferWrapper.setPixel(x, yi, r, g, b);
					y = y + a;
				}
			} else {
				float a = (dy == 0) ? 0 : dx / dy; // Avoid division by zero
				float x = x1;
				int xi;
				for (int y = y1; y < y2; y++) {
					xi = Math.round(x);
					intBufferWrapper.setPixel(xi, y, r, g, b);
					x = x + a;
				}
			}
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		
	}



	static Vector4i calcBoundingBox(Vector3f p1, Vector3f p2, Vector3f p3, int imageWidth, int imageHeight) { 

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
// EX_2___Triangles_rasterization
		int minX = (int) Math.floor(Math.max(0.0f, 
				Math.min(Math.min(p1.x, p2.x), p3.x)));
		int minY = (int) Math.floor(Math.max(0.0f, 
				Math.min(Math.min(p1.y, p2.y), p3.y)));
		int maxX = (int) Math.ceil(Math.min((float) imageWidth - 1, 
				Math.max(Math.max(p1.x, p2.x), p3.x)));
		int maxY = (int) Math.ceil(Math.min((float) imageHeight - 1, 
				Math.max(Math.max(p1.y, p2.y), p3.y)));
		return new Vector4i(minX, maxX, minY, maxY);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
//		return new Vector4i();
////////////////////////////////////////////////////////////////////////////////////

	}

	
	float lightingEquation(Vector3f point, Vector3f PointNormal, Vector3f LightPos, float Kd, float Ks, float Ka, float shininess) {

		Vector3f color = lightingEquation(point, PointNormal, LightPos, 
				                          new Vector3f(Kd), new Vector3f(Ks), new Vector3f(Ka), shininess);
		return color.get(0);
	}
	
	
	private static Vector3f lightingEquation(Vector3f point, Vector3f PointNormal, Vector3f LightPos, Vector3f Kd,
			Vector3f Ks, Vector3f Ka, float shininess) {

		Vector3f returnedColor = new Vector3f();

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
	if (exercise.ordinal() >= ExerciseEnum.EX_9___Lighting.ordinal()) {
		// LightDirection
		Vector3f LightDirection = new Vector3f(LightPos).sub(point).normalize();

		// Diffuse component: Kd * ( max(0, N · L ))
		float NdotL = PointNormal.dot(LightDirection);
		Vector3f diffuse = new Vector3f(Kd).mul(Math.max(0.0f, NdotL));
		returnedColor.add(diffuse);

		// Ambient component: Ka
		Vector3f ambient = new Vector3f(Ka);
		returnedColor.add(ambient);

		// Specular component: Ks * ( max(0, R · V) )^n
		// EyeDirection
		Vector3f EyePos = new Vector3f(0, 0, 0);
		Vector3f EyeDirection = new Vector3f(EyePos).sub(point).normalize();

		// Calculate ReflectionDirection based on LightDirection and PointNormal
		NdotL = PointNormal.dot(LightDirection);
		Vector3f ReflectionDirection;
		if (NdotL > 0) {
			ReflectionDirection = new Vector3f(PointNormal).mul(2.0f * NdotL).sub(LightDirection).normalize();
		} else {
			ReflectionDirection = new Vector3f(0, 0, 0);
		}

		// Specular component: Ks * (R · V)^n (guarding against negative R · V)
		float RdotV = Math.max(0.0f, ReflectionDirection.dot(EyeDirection));
		Vector3f specular = new Vector3f(Ks).mul((float) Math.pow(RdotV, shininess));
		returnedColor.add(specular);
	}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		return returnedColor;
	}	
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
