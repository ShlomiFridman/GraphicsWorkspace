package your_code;

import java.nio.IntBuffer;

import org.joml.Matrix4f;
import org.joml.Vector3f;

import app_interface.DisplayTypeEnum;
import app_interface.ExerciseEnum;
import app_interface.IntBufferWrapper;
import app_interface.ProjectionTypeEnum;

public class WorldModel {

	// type of rendering
	public ProjectionTypeEnum projectionType;
	public DisplayTypeEnum displayType;
	public boolean displayNormals;
	public YourSelectionEnum yourSelection;
	
	// camera location parameters
	public Vector3f cameraPos = new Vector3f();
	public Vector3f cameraLookAtCenter = new Vector3f();
	public Vector3f cameraUp = new Vector3f();
	public float horizontalFOV;

	// transformation parameters
	public float modelScale;

	// lighting parameters
	public float lighting_Diffuse;
	public float lighting_Specular;
	public float lighting_Ambient;
	public float lighting_sHininess;
	public Vector3f lightPositionWorldCoordinates = new Vector3f();
	
	public ExerciseEnum exercise;

	private int imageWidth;
	private int imageHeight;

	private ObjectModel object1;
	
	float zBuffer[][];
	
	private int counter = 0;
	
	public WorldModel(int imageWidth, int imageHeight) {
		this.imageWidth  = imageWidth;
		this.imageHeight = imageHeight;
		this.zBuffer = new float[imageWidth][imageHeight];
	}


	public boolean load(String fileName) {
		object1 = new ObjectModel(this, imageWidth, imageHeight);
		return object1.load(fileName);
	}
	
	public boolean modelHasTexture() {
		return object1.objectHasTexture();
	}
	int dx = 0, dy = 0;
	public void render(IntBufferWrapper intBufferWrapper) {
		counter+=1;
		intBufferWrapper.imageClear();
		clearZbuffer();
		object1.initTransfomations();

		if (exercise.ordinal() == ExerciseEnum.EX_3_1_Object_transformation___translation.ordinal()) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			//animation moving right
//			dx += Math.round(Math.random()*20 - 10);
//			dy += Math.round(Math.random()*20 - 10);
			Matrix4f translate = new Matrix4f().translate(dx, dy, 0);
			object1.setModelM(translate);
			
//			int t = ((counter*3) % (imageWidth*2))-imageWidth;
//			Matrix4f translate = new Matrix4f().translate(t, 0, 0);
//			object1.setModelM(translate);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		}
	
		if (exercise.ordinal() == ExerciseEnum.EX_3_2_Object_transformation___scale.ordinal()) {
			
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			//animation growing and shrinking
			float s = 0.9f+(float)Math.sin((float)counter/10)/5;
			Matrix4f scaling = new Matrix4f().translate(imageWidth/2, imageHeight/2, 0).scale(s).translate(-imageWidth/2, -imageHeight/2, 0);
			object1.setModelM(scaling);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

		}

		if (exercise.ordinal() == ExerciseEnum.EX_3_3_Object_transformation___4_objects.ordinal()) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			//animation moving right
			Matrix4f translate = 
					new Matrix4f().translate(450,150,0)
								  .scale(0.5f)
					              .translate(-300, -300, 0);
			object1.setModelM(translate);
			object1.render(intBufferWrapper);
			
			translate = 
					new Matrix4f().translate(150,150,0)
								  .scale(0.5f)
					              .translate(-300, -300, 0);
			object1.setModelM(translate);
			object1.render(intBufferWrapper);
			
			translate = 
					new Matrix4f().translate(150,450,0)
								  .scale(0.5f)
					              .translate(-300, -300, 0);
			object1.setModelM(translate);
			object1.render(intBufferWrapper);
			
			translate = 
					new Matrix4f().translate(450,450,0)
								  .scale(0.5f)
					              .translate(-300, -300, 0);
			object1.setModelM(translate);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		if (exercise.ordinal() >= ExerciseEnum.EX_4___Orthograpic_projection_and_viewport.ordinal()) {
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			if(projectionType==ProjectionTypeEnum.ORTHOGRAPHIC) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
				float left = -1.5f, right = 1.5f, bottom = -1.5f, top = 1.5f, zNear = 0f, zFar = 100f;
				Matrix4f projectionM = new Matrix4f().ortho(left, right, bottom, top, zNear, zFar);	
				object1.setProjectionM(projectionM);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			Matrix4f viewportM = YoursUtilities.createViewportMatrix(0, 0, imageWidth, imageHeight);	
			object1.setViewportM(viewportM);
		} 
		if (exercise.ordinal() >= ExerciseEnum.EX_5___lookat.ordinal()) {
			Matrix4f lookatM = new Matrix4f().lookAt(cameraPos, cameraLookAtCenter, cameraUp);	
			object1.setLookatM(lookatM);
		}
		if (exercise.ordinal() >= ExerciseEnum.EX_6___Perspective_projection.ordinal()) {
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
			if(projectionType==ProjectionTypeEnum.PERSPECTIVE) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
				float fovy = (float) (30f/180*Math.PI), aspect = 1f, zNear = 1f, zFar = 100f;
				Matrix4f projectionM = new Matrix4f().perspective(fovy, aspect, zNear, zFar);	
				object1.setProjectionM(projectionM);
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

			}
		}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////// solution ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
		
		object1.render(intBufferWrapper);
	}
	
	private void clearZbuffer() {
		for(int i=0; i<imageHeight; i++)
			for(int j=0; j<imageWidth; j++)
				zBuffer[i][j] = 1;
	}	
}
