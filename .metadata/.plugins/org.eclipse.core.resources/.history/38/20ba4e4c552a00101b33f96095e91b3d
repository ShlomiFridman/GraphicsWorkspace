package your_code;

import java.nio.IntBuffer;
import java.util.Random;

import org.joml.Matrix3f;
import org.joml.Matrix4f;
import org.joml.Vector3f;

import app_interface.DisplayTypeEnum;
import app_interface.ExerciseEnum;
import app_interface.IntBufferWrapper;
import app_interface.ProjectionTypeEnum;

public class WorldModel {

	// type of rendering
	public ProjectionTypeEnum projectionType;
	public DisplayTypeEnum displayType;
	public boolean displayNormals;
	public YourSelectionEnum yourSelection;
	
	// camera location parameters
	public Vector3f cameraPos = new Vector3f();
	public Vector3f cameraLookAtCenter = new Vector3f();
	public Vector3f cameraUp = new Vector3f();
	public float horizontalFOV;

	// transformation parameters
	public float modelScale;

	// lighting parameters
	public float lighting_Diffuse;
	public float lighting_Specular;
	public float lighting_Ambient;
	public float lighting_sHininess;
	public Vector3f lightPositionWorldCoordinates = new Vector3f();
	
	public ExerciseEnum exercise;

	private int imageWidth;
	private int imageHeight;

	private ObjectModel object1;
	
	float zBuffer[][];
	
	private float currentX = 0f;
	private float currentY = 0f;	
	
	private int counter = 0;
	
	ErrorLogger errorLogger;
	
	public WorldModel(int imageWidth, int imageHeight, ErrorLogger errorLogger) {
		this.imageWidth  = imageWidth;
		this.imageHeight = imageHeight;
		this.zBuffer = new float[imageWidth][imageHeight];
		this.errorLogger = errorLogger;
	}


	public boolean load(String fileName) {
		object1 = new ObjectModel(this, imageWidth, imageHeight);
		return object1.load(fileName);
	}
	
	public boolean modelHasTexture() {
		return object1.objectHasTexture();
	}
	
	
	public void render(IntBufferWrapper intBufferWrapper) {
		counter+=1;
		intBufferWrapper.imageClear();
		clearZbuffer();
		object1.initTransfomations();

		if (exercise.ordinal() == ExerciseEnum.EX_3_1_Object_transformation___translation.ordinal()) {
		    float dx = -2 + (float)(Math.random() * 4); // -2 to 2
		    float dy = -2 + (float)(Math.random() * 4); // -2 to 2
		    currentX += dx;
		    currentY += dy;
		    Matrix4f translationMatrix = new Matrix4f().translate(currentX, currentY, 0f);
		    object1.setModelM(translationMatrix);


		}
	
		if (exercise.ordinal() == ExerciseEnum.EX_3_2_Object_transformation___scale.ordinal()) {
		    int period = 40;
		    float centerX = 300f;
		    float centerY = 300f;
		    float minScale = 0.8f;
		    float maxScale = 1.1f;
		    int frameInCycle = counter % period;
		    float scale;
		    if (frameInCycle < period / 2) {
		        scale = minScale + (maxScale - minScale) * (frameInCycle / (float)(period / 2));
		    } else 
		        scale = maxScale - (maxScale - minScale) * ((frameInCycle - period / 2) / (float)(period / 2));
		    Matrix4f scaleM = new Matrix4f()
		    	    .translate(centerX, centerY, 0)
		    	    .scale(scale)
		    	    .translate(-centerX, -centerY, 0);
		    object1.setModelM(scaleM);
		}

		if (exercise.ordinal() == ExerciseEnum.EX_3_3_Object_transformation___4_objects.ordinal()) {
			float X1 = 0f, X2 = 300f;
			float Y1 = 0f, Y2 = 600f;
		    Matrix4f scaleM = new Matrix4f()
		    	    .translate(X1, Y1, 0)
		    	    .scale(0.5f)
		    	    .translate(-X1, -Y1, 0);
		    object1.setModelM(scaleM);
		    object1.render(intBufferWrapper);
		    scaleM = new Matrix4f()
		    	    .translate(X2, Y1, 0)
		    	    .scale(0.5f)
		    	    .translate(-X2, -Y1, 0);
		    object1.setModelM(scaleM);
		    object1.render(intBufferWrapper);
//		    scaleM = new Matrix4f()
//		    		.translate(X1, Y2, 0)
//		    		.scale(0.5f)
//		    		.translate(-X1, -Y2, 0);
//		    object1.setModelM(scaleM);
//		    scaleM = new Matrix4f()
//		    		.translate(X2, Y2, 0)
//		    		.scale(0.5f)
//		    		.translate(-X2, -Y2, 0);
			
		}


			if(projectionType==ProjectionTypeEnum.ORTHOGRAPHIC) {


			}

			
			if(projectionType==ProjectionTypeEnum.PERSPECTIVE) {


			}
			
		
		object1.render(intBufferWrapper);
	}
	
	private void clearZbuffer() {
		for(int i=0; i<imageHeight; i++)
			for(int j=0; j<imageWidth; j++)
				zBuffer[i][j] = 1;
	}	
}
