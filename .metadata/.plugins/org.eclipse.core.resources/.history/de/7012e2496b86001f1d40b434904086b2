package app_interface;

import java.nio.IntBuffer;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.joml.Vector3f;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelBuffer;
import javafx.scene.image.PixelFormat;
import javafx.scene.image.WritableImage;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import your_code.Color;
import your_code.WorldModel;
import your_code.YourSelectionEnum;

public class Main extends Application {
	// Constants
	public final int IMAGE_WIDTH = InterfaceDefaultParams.IMAGE_WIDTH;
	public final int IMAGE_HEIGHT = InterfaceDefaultParams.IMAGE_HEIGHT;
	public final int INITIAL_CAMERA_DISTANCE_FROM_AXIS_CENTER = InterfaceDefaultParams.INITIAL_CAMERA_DISTANCE_FROM_AXIS_CENTER;
	public final float CAMERA_MAX_VERTICAL_ANGLE = InterfaceDefaultParams.CAMERA_MAX_VERTICAL_ANGLE;

	// Unsaved parameters - can change during execution but are not saved between
	// runs.
	// loaded with their default value, and managed by the Main class during execution.
	private float cameraRadius = InterfaceDefaultParams.cameraRadius;
	private Vector3f cameraPos = InterfaceDefaultParams.cameraPos;
	private Vector3f cameraLookAtCenter = InterfaceDefaultParams.cameraLookAtCenter;
	private Vector3f cameraUp = InterfaceDefaultParams.cameraUp;
	private float cameraAngleHorizontal = InterfaceDefaultParams.cameraAngleHorizontal;
	private float cameraAngleVertical = InterfaceDefaultParams.cameraAngleVertical;

	private float horizontalFOV = InterfaceDefaultParams.horizontalFOV;

	private float modelScale = InterfaceDefaultParams.modelScale;

	private float lighting_Diffuse = InterfaceDefaultParams.lighting_Diffuse;
	private float lighting_Specular = InterfaceDefaultParams.lighting_Specular;
	private float lighting_Ambient = InterfaceDefaultParams.lighting_Ambient;
	private float lighting_sHininess = InterfaceDefaultParams.lighting_sHininess;
	private Vector3f lightPosition = InterfaceDefaultParams.lightPosition;

	// Saved parameters - these are managed by this class and persist between runs.
	// Managed by the InterfaceSavedParams class and not saved also by the Main class.
	private InterfaceSavedParams savedParams = new InterfaceSavedParams();

	// The 3D model class that handles rendering
	WorldModel worldModel = new WorldModel(IMAGE_WIDTH, IMAGE_HEIGHT);

	// User interface variables

	// Image variables
	private IntBuffer intBuffer;
	private IntBufferWrapper intBufferWrapper;
	private PixelBuffer<IntBuffer> pixelBuffer;
	private ImageView imageView;
	private long imageLastTimesUpdated = 0;
	private boolean imageLoaded;

	// labels
	private Label labelInfo1;
	private Label labelInfo2;
	private Label labelInfo3;
	private Label labelInfo4;
	private Label labelInfo5;
	private StringProperty labelInfo1StringProperty = new SimpleStringProperty("");
	private StringProperty labelInfo2StringProperty = new SimpleStringProperty("");
	private StringProperty labelInfo3StringProperty = new SimpleStringProperty("");
	private StringProperty labelInfo4StringProperty = new SimpleStringProperty("");
	private StringProperty labelInfo5StringProperty = new SimpleStringProperty("");
	private long labelLastUpdateTime = 0;

	// comboboxes
	ComboBox<ProjectionTypeEnum> comboProjType;
	ComboBox<DisplayTypeEnum> comboDispType;
	ComboBox<String> comboDispNormals;
	ComboBox<String> comboAnimation;
	ComboBox<String> comboExercise;
	ComboBox<YourSelectionEnum> comboYourSelection;

	// animation timer
	AnimationTimer timer;

	// stage
	Stage primaryStage;

	// measuring time
	TimeMeasurement timeMeasurementRendering = new TimeMeasurement(10);
	TimeMeasurement timeMeasurementDisplay = new TimeMeasurement(10);
	int renderingPercentDone;

	// Loading the model and creating the window method
	//////////////////////////////////////////////////

	public void start(Stage primaryStage) throws Exception {


		// creating the application window layout
		//////////////////////////////////////////////////////

		// Buttons Dropdown menus row
		Label labelOpen = new Label(" ");
		Button buttonOpen = new Button("Open file...");
		VBox vboxButtonOpen = new VBox(labelOpen, buttonOpen);

		Label labelRender = new Label(" ");
		Button buttonRender = new Button("Start Rendering");
		VBox vboxButtonRender = new VBox(labelRender, buttonRender);

		Label labelStopRendering = new Label(" ");
		Button buttonStopRendering = new Button("Stop Rendering");
		VBox vboxButtonStopRendering = new VBox(labelStopRendering, buttonStopRendering);

		Label labelSave = new Label(" ");
		Button buttonSave = new Button("Save image ...");
		VBox vboxSave = new VBox(labelSave, buttonSave);

		Label labelProjType = new Label("Projection Type:");
		comboProjType = new ComboBox<>();
		comboProjType.getItems().addAll(ProjectionTypeEnum.values());
		comboProjType.setValue(savedParams.getProjectionType());
		VBox vboxProj = new VBox(labelProjType, comboProjType);

		Label labelDispType = new Label("Display Type:");
		comboDispType = new ComboBox<>();
		comboDispType.getItems().addAll(DisplayTypeEnum.values());
		comboDispType.setValue(savedParams.getDisplayType());
		VBox vboxDisp = new VBox(labelDispType, comboDispType);

		Label labelDispNormals = new Label("Normals:");
		comboDispNormals = new ComboBox<>();
		comboDispNormals.getItems().addAll("True", "False");
		comboDispNormals.setValue(savedParams.isDisplayNormals() ? "True" : "False");
		VBox vboxNormals = new VBox(labelDispNormals, comboDispNormals);

		Label labelAnimationon = new Label("Animate:");
		comboAnimation = new ComboBox<>();
		comboAnimation.getItems().addAll("True", "False");
		comboAnimation.setValue("False");
		VBox vboxAnimate = new VBox(labelAnimationon, comboAnimation);

		HBox buttonRow = new HBox(vboxButtonOpen, vboxButtonRender, vboxButtonStopRendering, vboxSave);
		HBox dropdownRow = new HBox(vboxProj, vboxDisp, vboxNormals, vboxAnimate);

		// Image
		intBuffer = IntBuffer.allocate(IMAGE_WIDTH * IMAGE_HEIGHT);
		intBufferWrapper = new IntBufferWrapper(intBuffer, IMAGE_WIDTH, IMAGE_HEIGHT);
		pixelBuffer = new PixelBuffer<>(IMAGE_WIDTH, IMAGE_HEIGHT, intBuffer, PixelFormat.getIntArgbPreInstance());
		imageView = new ImageView(new WritableImage(pixelBuffer));

		// labels
		labelInfo1 = new Label("");
		labelInfo2 = new Label("");
		labelInfo3 = new Label("");
		labelInfo4 = new Label("");
		labelInfo5 = new Label("");
		// Bind labels to the properties
		labelInfo1.textProperty().bind(labelInfo1StringProperty);
		labelInfo2.textProperty().bind(labelInfo2StringProperty);
		labelInfo3.textProperty().bind(labelInfo3StringProperty);
		labelInfo4.textProperty().bind(labelInfo4StringProperty);
		labelInfo5.textProperty().bind(labelInfo5StringProperty);

		// Exercise label and combobox
		Label labelExercise = new Label("Exercise: ");
		comboExercise = new ComboBox<>();
		for (ExerciseEnum ex : ExerciseEnum.values())
			comboExercise.getItems().add(ex.getDescription());
		// comboExercise.getItems().addAll(ExerciseEnum.values());
		comboExercise.setValue(savedParams.getExercise().toString());

		// Your selection label and combobox
		Label labelYourSelection = new Label("  Your selection: ");
		comboYourSelection = new ComboBox<>();
		comboYourSelection.getItems().addAll(YourSelectionEnum.values());
//        for(YourSelectionEnum sel: YourSelectionEnum.values())
//        	comboYourSelection.getItems().add(sel);
		comboYourSelection.setValue(YourSelectionEnum.values()[0]);

		HBox hboxExercise = new HBox(labelExercise, comboExercise, labelYourSelection, comboYourSelection);

		// combining button and combobox row with image and lables
		VBox vbox = new VBox(buttonRow, dropdownRow, imageView, labelInfo1, labelInfo2, labelInfo3, labelInfo4,
				labelInfo5, hboxExercise);

		// creating scene setting the stage
		Scene scene = new Scene(vbox);
		primaryStage.setScene(scene);
		primaryStage.setTitle("3D Rasterization App");

		// Add event listeners
		//////////////////////////////////////////////////////

		// buttons
		buttonOpen.setOnAction(this::handleOpenFile);
		buttonRender.setOnAction(this::handleRender);
		buttonStopRendering.setOnAction(this::handleStopRendering);
		buttonSave.setOnAction(this::handleSaveFile);

		comboProjType.setOnAction(this::handleProjectionTypeChange);
		comboDispType.setOnAction(this::handleDisplayTypeChange);
		comboDispNormals.setOnAction(this::handleDisplayNormalsChange);
		comboAnimation.setOnAction(this::handleAnimationChange);
		comboExercise.setOnAction(this::handleExerciseChange);
		comboYourSelection.setOnAction(this::handleYourSelectionChange);

		// keyboard
		scene.setOnKeyPressed(this::handleKeyPressed);

		// mouse
		scene.setOnMousePressed(this::handleMousePress);
		scene.setOnMouseReleased(this::handleMouseReleases);
		scene.setOnMouseDragged(this::handleMouseDragged);
		scene.addEventFilter(ScrollEvent.SCROLL, this::handleMouseWheelScrolling);

		// Create animation timer
		timer = new AnimationTimer() {
			@Override
			public void handle(long now) {
				timerRender();
			}
		};

		// Force rendering and label update after the stage is visible
		Platform.runLater(() -> {
			intBufferWrapper.fillImageWithColor(50, 50, 50);
			intBufferWrapper.writeText("Loading model...", IMAGE_WIDTH/2-150, IMAGE_HEIGHT/2-20, 40, 100, 200, 100);
			updateDisplay();

			ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
			executor.schedule(() -> {
				// Loading the model and initialize display parameters
				imageLoaded = worldModel.load(savedParams.getModelFileName());
				setCameraLocation(cameraPos, cameraLookAtCenter, cameraUp, horizontalFOV);
				setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
				setRenderingType(savedParams.getProjectionType(), savedParams.getDisplayType(), savedParams.isDisplayNormals());
				setTransformation(modelScale);
				setExercise(savedParams.getExercise());

				startRender();
			}, 1, TimeUnit.SECONDS);			

		});

		// Show the stage
		// scene.getRoot().requestFocus();
		primaryStage.setResizable(false);
		primaryStage.show();
	}

	public static void main(String[] args) {
		launch(args);
	}

	// Updating window method -
	// image and labels are updated when parameters change
	//////////////////////////////////////////////////

	// Buttons handlers
	//////////////////////////////////////////////////

	// Open file
	private void handleOpenFile(ActionEvent event) {
		String filePath = Utilities.openFileChooser(primaryStage, "model",
				Paths.get(savedParams.getModelFileName()).getParent().toString());
		if (filePath != null) {
			intBufferWrapper.writeText("Loading model...", IMAGE_WIDTH/2-150, IMAGE_HEIGHT/2-20, 40, 100, 200, 100);
			updateDisplay();

			ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
			executor.schedule(() -> {
				imageLoaded = worldModel.load(filePath);
				savedParams.setModelFileName(filePath);
				startRender();
			}, 1, TimeUnit.SECONDS);			
		}
	}

	
	
	private void handleRender(ActionEvent event) {
		startRender();
	}

	private void handleStopRendering(ActionEvent event) {
		stopRedering();
	}

	// Save file
	private void handleSaveFile(ActionEvent event) {
		String filePath = Utilities.saveFileChooser(primaryStage, "bmp", savedParams.getSaveImagePath());
		if (filePath != null) {
			intBufferWrapper.saveToBMP(filePath);
			savedParams.setSaveImagePath(Paths.get(filePath).getParent().toString());
		}
	}

	int counter;
	RandomPixelIterable randomPixelIterable;
	Iterator<Integer[]> iterator;

	private void startRender() {
		if (imageLoaded || savedParams.getExercise().ordinal() <= ExerciseEnum.EX_1_2.ordinal()) {
			counter = 0;
			randomPixelIterable = new RandomPixelIterable(IMAGE_WIDTH, IMAGE_HEIGHT);
			iterator = randomPixelIterable.iterator();
			intBufferWrapper.imageClear();
			timer.start();
		} else {
			System.err.println("Fail to load file.");
			setDesciptionStrings();
			intBufferWrapper.imageClear();
			intBufferWrapper.fillImageWithColor(50, 50, 50);
			intBufferWrapper.writeText("Fail to load model file !", IMAGE_WIDTH/2-200, IMAGE_HEIGHT/2-20, 40, 255, 0, 0);
			updateDisplay();
		}
		timeMeasurementRendering.start();
	}

	private void stopRedering() {
		timer.stop();
	}

	private void updateDisplay() {
		pixelBuffer.updateBuffer(b -> null);
		imageView.setImage(new WritableImage(pixelBuffer));


		imageLastTimesUpdated = System.nanoTime();
		imageView.requestFocus();
	}
	
	private void timerRender() {

		// Rendering
		while (System.nanoTime() - imageLastTimesUpdated < InterfaceDefaultParams.IMAGE_UPDATE_INTERVAL_IN_MS * 1_000_000) {
			for (int i = 0; i < IMAGE_WIDTH; i++) {
				if (!iterator.hasNext()) {
					timer.stop();
					setDesciptionStrings();
					break;
				} else {
					Integer[] indexPercentArray = iterator.next();
					int imageIndex = indexPercentArray[0];
					renderingPercentDone = indexPercentArray[1];
					int imageX = imageIndex % IMAGE_WIDTH;
					int imageY = imageIndex / IMAGE_WIDTH;
					Color pixelColor = worldModel.renderPixel(imageX, imageY);
					intBufferWrapper.setPixel(imageX, imageY, pixelColor.getR(), pixelColor.getG(), pixelColor.getB());
				}
			}
		}

		// Update labels
		if (System.nanoTime() - labelLastUpdateTime > InterfaceDefaultParams.LABELS_UPDATE_INTERVAL_IN_MS * 1_000_000) {
			setDesciptionStrings();
			labelLastUpdateTime = System.nanoTime();
		}
		
		// updating display
		updateDisplay();

//		timeMeasurementRendering.start();
//		timeMeasurementRendering.stop();
//		timeMeasurementDisplay.start();
//		timeMeasurementDisplay.stop();
		
		
//    	//Update image
//        if (System.nanoTime() - imageLastTimesUpdated > InterfaceDefaultParams.IMAGE_UPDATE_INTERVAL_IN_MS * 1_000_000) {
//
//        	//Rendering
//        	timeMeasurementRendering.start();
//        	
//        	
//        	
//        	
////	        drawCross(intBufferWrappers[backBufferIndex]);
//	        timeMeasurementRendering.stop();
//	
//
//	        //Swapping buffers and updating display
//	        timeMeasurementDisplay.start();
//	        //updating display
//	    	pixelBuffer.updateBuffer(b -> null);
//	    	imageView.setImage(new WritableImage(pixelBuffer));
//	    	timeMeasurementDisplay.stop();
//	    	
//	        imageLastTimesUpdated = System.nanoTime();
//        }
//
//        //Update labels
//        if(System.nanoTime() - labelLastUpdateTime > InterfaceDefaultParams.LABELS_UPDATE_INTERVAL_IN_MS * 1_000_000) {
//	    	labelInfo1StringProperty.set(desciptionString1());  // Updates automatically on JavaFX thread
//	    	labelInfo2StringProperty.set(desciptionString2());
//	    	labelInfo3StringProperty.set(desciptionString3());
//	    	labelInfo4StringProperty.set(desciptionString4());
//	    	labelLastUpdateTime = System.nanoTime(); 
//		}
//        
//        imageView.requestFocus();
	}

	private void calcPixelAndUpdateDescriptionString(MouseEvent event) {
		int cursorX = (int) event.getX();
		int cursorY = IMAGE_HEIGHT + InterfaceDefaultParams.SIZE_OF_UPPER_INTERFACE_ROW_IN_PIXELS - (int) event.getY();
		Color pixelColor = worldModel.renderPixel(cursorX, cursorY);
		setPixelDesciptionString(cursorX, cursorY, pixelColor);
	}

	
	
	// Mouse press
	private void handleMousePress(MouseEvent event) {
		calcPixelAndUpdateDescriptionString(event);
	}

	// Mouse releases
	private void handleMouseReleases(MouseEvent event) {
	}

	// Mouse move
	private void handleMouseDragged(MouseEvent event) {
		calcPixelAndUpdateDescriptionString(event);
	}

	// Mouse move
	private void handleMouseWheelScrolling(ScrollEvent event) {

		event.consume();
	}


	private String desciptionString1() {
		return String.format(
				"Camera angles:(%.1f,%.1f) position:(%.1f,%.1f,%.1f) cameraLookAtCenter:(%.1f,%.1f,%.1f) Scale: %.1f",
				cameraAngleHorizontal, cameraAngleVertical, cameraPos.x, cameraPos.y, cameraPos.z, cameraLookAtCenter.x,
				cameraLookAtCenter.y, cameraLookAtCenter.z, modelScale);
	}

	private String desciptionString2() {
		return String.format("Lighting reflection - Diffuse:%1.2f, Specular:%1.2f, Ambient:%1.2f, sHininess:%1.2f",
				lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess);
	}

	private String desciptionString3() {
		String str = savedParams.getModelFileName();
		str = (str.length() > 60)
				? Paths.get(savedParams.getModelFileName()).getRoot() + " ... " + str.substring(str.length() - 60)
				: str;
		if (!imageLoaded)
			str += " - loading failed !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
		return String.format("3D model: %s", str);
	}

	private String desciptionString4() {
		return String.format(
				"Rendering percent done %d. estimated overall time: %.3f seconds",
				renderingPercentDone,
				100f/(float)renderingPercentDone*timeMeasurementRendering.getTimeFromStart()/1000);
	}

	private void setDesciptionStrings() {
		labelInfo1StringProperty.set(desciptionString1());
		labelInfo2StringProperty.set(desciptionString2());
		labelInfo3StringProperty.set(desciptionString3());
		labelInfo4StringProperty.set(desciptionString4());
	}
	
	private void setPixelDesciptionString(double x, double y, Color pixelColor) {
		labelInfo5StringProperty.set(String.format("pixel %.1f,%.1f - color %d, %d, %d", x, y,
				pixelColor.getR(), pixelColor.getG(), pixelColor.getB()));
	}
	
//    private void drawCross(IntBufferWrapper intBufferWrapper) {
//        int width = IMAGE_WIDTH;
//        int height = IMAGE_HEIGHT;
//
//        int crossR = 10;
//        int minCrossX = Math.max(0, crossX - crossR);
//        int maxCrossX = Math.min(crossX + crossR, width);
//        for (int i = minCrossX; i < maxCrossX; i++)
//        	intBufferWrapper.setPixel(i, crossY, 255, 128, 128);
//        int minCrossY = Math.max(0, crossY - crossR);
//        int maxCrossY = Math.min(crossY + crossR, height);
//        for (int i = minCrossY; i < maxCrossY; i++)
//        	intBufferWrapper.setPixel(crossX, i, 255, 128, 128);
//    }

	// Mouse and keybouard handlers
	//////////////////////////////////////////////////

	// Keyboord
	private void handleKeyPressed(KeyEvent event) {
		// For each key changing the state, updating the window acordingly and Consume
		// the event to prevent further propagation
		KeyCode keyCode = event.getCode();
		if (keyCode == KeyCode.UP) {
			event.consume();
		} else if (keyCode == KeyCode.DOWN) {
			event.consume();
		} else if (keyCode == KeyCode.LEFT) {
			event.consume();
		} else if (keyCode == KeyCode.RIGHT) {
			event.consume();
		} else if (keyCode == KeyCode.ADD) {
			modelScale += 0.1;
			setTransformation(modelScale);
			event.consume();
		} else if (keyCode == KeyCode.SUBTRACT) {
			modelScale -= 0.1;
			setTransformation(modelScale);
			event.consume();
		} else if (keyCode == KeyCode.D) {
			lighting_Diffuse += 0.05;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.C) {
			lighting_Diffuse -= 0.05;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.S) {
			lighting_Specular += 0.05;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.X) {
			lighting_Specular -= 0.05;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.A) {
			lighting_Ambient += 0.05;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.Z) {
			lighting_Ambient -= 0.05;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.H) {
			lighting_sHininess += 1;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		} else if (keyCode == KeyCode.N) {
			lighting_sHininess -= 1;
			setLightingParams(lighting_Diffuse, lighting_Specular, lighting_Ambient, lighting_sHininess, lightPosition);
			event.consume();
		}
	}

	// ComboBox handlers
	//////////////////////////////////////////////////
	private void handleProjectionTypeChange(ActionEvent e) {
		savedParams.setProjectionType(comboProjType.getValue());

		setRenderingType(savedParams.getProjectionType(), savedParams.getDisplayType(), savedParams.isDisplayNormals());
	}

	private void handleDisplayTypeChange(ActionEvent e) {
		savedParams.setDisplayType(comboDispType.getValue());
		setRenderingType(savedParams.getProjectionType(), savedParams.getDisplayType(), savedParams.isDisplayNormals());
	}

	private void handleDisplayNormalsChange(ActionEvent e) {
		savedParams.setDisplayNormals(Boolean.parseBoolean(comboDispNormals.getValue())); // Assuming setter exists in
																							// params
		setRenderingType(savedParams.getProjectionType(), savedParams.getDisplayType(), savedParams.isDisplayNormals());
	}

	private void handleAnimationChange(ActionEvent e) {
		if (comboAnimation.getValue().equals("True")) {
			timer.start();
		} else {
			timer.stop();
		}
	}

	private void handleExerciseChange(ActionEvent e) {
		ExerciseEnum selectedExercise = ExerciseEnum.values()[comboExercise.getSelectionModel().getSelectedIndex()];
		savedParams.setExercise(selectedExercise);
		setExercise(selectedExercise);
		stopRedering();
		startRender();
	}

	private void handleYourSelectionChange(ActionEvent e) {
		YourSelectionEnum yourSelection = comboYourSelection.getValue();
		setYourSelection(yourSelection);
	}

	// methods for setting parameters of model rendering
	//////////////////////////////////////////////////

	public void setRenderingType(ProjectionTypeEnum projectionType, DisplayTypeEnum displayType,
			boolean displayNormals) {
		worldModel.projectionType = projectionType;
		worldModel.displayType = displayType;
		worldModel.displayNormals = displayNormals;
	}

	public void setCameraLocation(Vector3f cameraPos, Vector3f cameraLookAtCenter, Vector3f cameraUp,
			float horizontalFOV) {
		worldModel.cameraPos = cameraPos;
		worldModel.cameraLookAtCenter = cameraLookAtCenter;
		worldModel.cameraUp = cameraUp;
		worldModel.horizontalFOV = horizontalFOV;
	}

	public void setTransformation(float modelScale) {
		worldModel.modelScale = modelScale;
	}

	public void setLightingParams(float lighting_Diffuse, float lighting_Specular, float lighting_Ambient,
			float lighting_sHininess, Vector3f lightPosition) {
		worldModel.lighting_Diffuse = lighting_Diffuse;
		worldModel.lighting_Specular = lighting_Specular;
		worldModel.lighting_Ambient = lighting_Ambient;
		worldModel.lighting_sHininess = lighting_sHininess;
		worldModel.lightPosition = lightPosition;
	}

	public void setExercise(ExerciseEnum exercise) {
		worldModel.exercise = exercise;
	}

	public void setYourSelection(YourSelectionEnum sel) {
		worldModel.yourSelection = sel;
	}
}
